/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package net.ouranos.application.digiline.controller;

import java.util.UUID;
import net.ouranos.domain.digiline.model.Vehicle;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-07T13:31:54.885946600+09:00[Asia/Tokyo]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "C-4 共同配送システム", description = "the C-4 共同配送システム API")
public interface VehicleApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /vehicle : 車輛マスタを削除
     * 車輛マスタを削除します。
     *
     * @param giai 削除したいGIAI (required)
     * @return 車輛マスタを正常に削除しました。 (status code 200)
     *         or HTTP400エラー (status code 400)
     *         or HTTP500エラー (status code 500)
     */
    @Operation(
        operationId = "vehicleDelete",
        summary = "車輛マスタを削除",
        description = "車輛マスタを削除します。",
        tags = { "C-4 共同配送システム" }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/vehicle"
    )
    
    ResponseEntity<Void> vehicleDelete(@Parameter(name = "X-Tracking", description = "トラッキングID", in = ParameterIn.HEADER) @RequestHeader(value = "X-Tracking", required = false) UUID xTracking,
        @NotNull @Parameter(name = "giai", description = "削除したいGIAI", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "giai", required = true) String giai
    ); 


    /**
     * GET /vehicle : 指定した車輌種別の車輛マスタを取得
     * 指定した車輌種別に基づいて、車輛マスタを取得します。
     *
     * @param vehicleType 取得したい車輌種別 (required)
     * @return 指定した車輌種別に基づいて、車輛マスタを正常に取得しました。 (status code 200)
     *         or HTTP400エラー (status code 400)
     *         or HTTP500エラー (status code 500)
     */
    @Operation(
        operationId = "vehicleGet",
        summary = "指定した車輌種別の車輛マスタを取得",
        description = "指定した車輌種別に基づいて、車輛マスタを取得します。",
        tags = { "C-4 共同配送システム" }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/vehicle",
        produces = { "application/json" }
    )
    
    ResponseEntity<Object> vehicleGet(@Parameter(name = "X-Tracking", description = "トラッキングID", in = ParameterIn.HEADER) @RequestHeader(value = "X-Tracking", required = false) UUID xTracking,
        @NotNull @Parameter(name = "vehicle_type", description = "取得したい車輌種別", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "vehicle_type", required = true) String vehicleType
    ); 


    /**
     * PUT /vehicle : 車輛マスタを登録
     * 車輛マスタを登録します。
     *
     * @param vehicle 車両マスタ (required)
     * @return 車輛マスタを正常に登録しました。 (status code 201)
     *         or HTTP400エラー (status code 400)
     *         or HTTP500エラー (status code 500)
     */
    @Operation(
        operationId = "vehiclePut",
        summary = "車輛マスタを登録",
        description = "車輛マスタを登録します。",
        tags = { "C-4 共同配送システム" }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/vehicle",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> vehiclePut(@Parameter(name = "X-Tracking", description = "トラッキングID", in = ParameterIn.HEADER) @RequestHeader(value = "X-Tracking", required = false) UUID xTracking,
        @Parameter(name = "Vehicle", description = "車両マスタ", required = true) @Valid @RequestBody Vehicle vehicle
    ); 

}
