/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package net.ouranos.application.digiline.controller;

import org.springframework.format.annotation.DateTimeFormat;
import net.ouranos.domain.digiline.model.DataModelNearMissInfoList;
import java.time.OffsetDateTime;
import java.util.UUID;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-09-09T11:48:47.704348200+09:00[Asia/Tokyo]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "ヒヤリハット管理システム", description = "the ヒヤリハット管理システム API")
public interface NearMissInfoListApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /nearmissinfolist : C-3-2 ヒヤリハット情報一覧データモデル取得
     * ヒヤリハット情報一覧データモデルのデータを取得します。
     *
     * @param id データIDフィルター (optional)
     * @param name 名称フィルター (optional)
     * @param category 分類フィルター (optional)
     * @param summary 要約フィルター (optional)
     * @param from 発生時刻フィルター。下限値（包含） (optional)
     * @param to 発生時刻フィルター。上限値（排他） (optional)
     * @param lat0 発生地点フィルター。下限緯度（包含） (optional)
     * @param lon0 発生地点フィルター。下限経度（包含） (optional)
     * @param lat1 発生地点フィルター。上限緯度（包含） (optional)
     * @param lon1 発生地点フィルター。上限経度（包含） (optional)
     * @return OK (status code 200)
     *         or リクエスト入力形式不備 (status code 400)
     *         or 認証トークン不備、有効期限切れ、アクセス権限無し (status code 401)
     */
    @Operation(
        operationId = "nearmissinfolistGet",
        summary = "C-3-2 ヒヤリハット情報一覧データモデル取得",
        description = "ヒヤリハット情報一覧データモデルのデータを取得します。",
        tags = { "ヒヤリハット管理システム" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                // @Content(mediaType = "application/json", schema = @Schema(implementation = NearMissInfoList.class))
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataModelNearMissInfoList.class))
            }),
            @ApiResponse(responseCode = "400", description = "リクエスト入力形式不備"),
            @ApiResponse(responseCode = "401", description = "認証トークン不備、有効期限切れ、アクセス権限無し")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/nearmissinfolist",
        produces = { "application/json" }
    )
    
    ResponseEntity<Object> nearmissinfolistGet(
        @Parameter(name = "X-Tracking", description = "トラッキングID", in = ParameterIn.HEADER) @RequestHeader(value = "X-Tracking", required = false) UUID xTracking,
        @Parameter(name = "id", description = "データIDフィルター", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) UUID id,
        @Size(min = 0, max = 4096) @Parameter(name = "name", description = "名称フィルター", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Size(min = 0, max = 4096) @Parameter(name = "category", description = "分類フィルター", in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = false) String category,
        @Size(min = 0, max = 4096) @Parameter(name = "summary", description = "要約フィルター", in = ParameterIn.QUERY) @Valid @RequestParam(value = "summary", required = false) String summary,
        @Parameter(name = "from", description = "発生時刻フィルター。下限値（包含）", in = ParameterIn.QUERY) @Valid @RequestParam(value = "from", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime from,
        @Parameter(name = "to", description = "発生時刻フィルター。上限値（排他）", in = ParameterIn.QUERY) @Valid @RequestParam(value = "to", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime to,
        @Parameter(name = "lat0", description = "発生地点フィルター。下限緯度（包含）", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lat0", required = false) Double lat0,
        @Parameter(name = "lon0", description = "発生地点フィルター。下限経度（包含）", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lon0", required = false) Double lon0,
        @Parameter(name = "lat1", description = "発生地点フィルター。上限緯度（包含）", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lat1", required = false) Double lat1,
        @Parameter(name = "lon1", description = "発生地点フィルター。上限経度（包含）", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lon1", required = false) Double lon1
    );

}
